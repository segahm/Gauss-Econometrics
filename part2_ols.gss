new; cls;
library maxlik;
string _max_Options = { NEWTON BRENT INFO CENTRAL };
gausset;
format 9,4;

__con = 0;
_fcmptol = 1000000;

filename = "part2_source.xlsx";
vls = reshape(" ",9,1);


STOCKS_N = 943;
T_PERIODS = 676;
COMPANIES = seqa(1,1,STOCKS_N);

//min, max, mean, st_dev - hml
//min, max, mean, st_dev - SMB
HML_SMB_STATS = zeros(1,8);

FIELD_NAMES = 
"P"$|
"MV"$|
"MTBV"$|
"PTBV"$|
"RI"$|
"VO";
P = zeros(T_PERIODS,STOCKS_N);
MV = zeros(T_PERIODS,STOCKS_N);
MTBV  = zeros(T_PERIODS,STOCKS_N);
PTBV = zeros(T_PERIODS,STOCKS_N);
RI = zeros(T_PERIODS,STOCKS_N);
VO = zeros(T_PERIODS,STOCKS_N);

alive_dead = zeros(STOCKS_N,2);

for i_sheet(1,rows(FIELD_NAMES),1);
    data  = xlsreadm(filename, "A2:AJG680" , i_sheet,0);
    data = data[1:252,.]|data[254:319,.]|data[321:375,.]|data[377:rows(data),.];
    s = varput(data,FIELD_NAMES[i_sheet]);
endfor;


ex_rate  = xlsreadm(filename, "B1:B677" , 7,0);
ex_change = ln(ex_rate[2:rows(ex_rate)]./ex_rate[1:rows(ex_rate)-1]);
ex_rate = ex_rate[2:rows(ex_rate)];
is_usd_or_ru = xlsreadm(filename, "E2:E944" , 7,0);
apply_exchange_rate();

/******************************************************************
***********CONSTRUCT HML AND SMB***********************************
******************************************************************/

//returns - one less than the # of observations
SMB = zeros(T_PERIODS-1,1);
HML = zeros(T_PERIODS-1,1);

_small_small = zeros(T_PERIODS-1,1);
_small_med = zeros(T_PERIODS-1,1);
_small_ll = zeros(T_PERIODS-1,1);
_big_small = zeros(T_PERIODS-1,1);
_big_med = zeros(T_PERIODS-1,1);
_big_lg  = zeros(T_PERIODS-1,1);

ind = portfolio_indexes(2);
value_size(ind,2,52);
//for each year determine indexes
for start_series(53,rows(PTBV),52);
    ind = portfolio_indexes(start_series);
    end_series = min(start_series+51,rows(MV));
    value_size(ind,start_series,end_series);
endfor;

/*****************************************************************
********************END HML AND SMB*******************************
*****************************************************************/

oil_prices = xlsreadm(filename, "B4:B679" , 8,0);
market = xlsreadm(filename, "B1:B676" , 9,0);
t_bill = xlsreadm(filename, "B8:E682" , 10,0);
refinance = xlsreadm(filename, "E16:E690" , 11,0);

t_bill = t_bill/100;    //convert to %
r_f = (1+t_bill[.,3])^(1/52)-1;
r = xlsWritem(HML~SMB~_small_small~_small_med~_small_ll~_big_small~_big_med~_big_lg~r_f,"out_part2.xlsx", "B2" , 1,0);
HML_SMB_STATS = HML_SMB_STATS[2:8,.];
print "r" r;
r = xlsWritem(HML_SMB_STATS[.,1:4]'|HML_SMB_STATS[.,5:8]',"out_part2.xlsx", "C2" , 5,0);
print HML_SMB_STATS[.,1:4]'|HML_SMB_STATS[.,5:8]';
print "r" r;
//data  = xlsreadm("out_part2.xlsx", "B2:C676" , 1,0);
//HML = data[.,1]; SMB = data[.,2];
end;
/***************************************************************
*********************ESTIMATE MARKET****************************
***************************************************************/
Y = market[2:rows(market)]./market[1:(rows(market)-1)]-1;
ch_market = Y;
length = rows(Y);
X = market[1:length]~oil_prices[(rows(oil_prices)-length):rows(oil_prices)-1]~ex_change[2:rows(ex_change)]
    ~t_bill[.,1]~refinance;
{B,st_err,R2} = ols(Y,X);
print "Realized Market on lagged: oil, exchange rate, t_bill";
print "B: " B';
print "S: " st_err';
print "T: " (B./st_err)';
print "R2: " R2;
data = B'|st_err'|(B./st_err)'|((rows(Y)|R2)*ones(rows(B),1)');


r = xlsWritem(data,"out_part2.xlsx", "B3:F7" , 2,0);

fitted_value = Y-r_f;//X*B-r_f;
r = xlsWritem(fitted_value,"out_part2.xlsx", "K3" , 1,0);

RI = safe_return_division(RI);
//r = xlsWritem(RI[.,1:200],"out_part2.xlsx", "A2:GR679" , 3,0);
//r = xlsWritem(RI[.,201:400],"out_part2.xlsx", "A2:GR679" , 4,0);
//r = xlsWritem(RI[.,401:600],"out_part2.xlsx", "A2:GR679" , 5,0);
//r = xlsWritem(RI[.,601:800],"out_part2.xlsx", "A2:GR679" , 6,0);
//r = xlsWritem(RI[.,801:cols(RI)],"out_part2.xlsx", "A2:EW679" , 7,0);
//set_alive_dead();
//r = xlsWritem(seqa(1,1,STOCKS_N)~alive_dead,"out_part2.xlsx", "G2" , 1,0);

alive_dead = xlsreadm(filename, "B2:C944" , 14,0);
/******************************************************************
*********************SELECT MOST LIQUID STOCKS*********************
*******************************************************************/
/*T = rows(VO)-1;
zerod_mv = -meanc((VO.*P.*(MV .> 0))./(MV+(MV .<= 0)));
zerod_v = meanc(VO .<= 0);
zerod_p = meanc((P[2:(T+1),.]-P[1:T,.]) .<= 0);
VO = VO[2:(T+1),.];
MV = MV[2:(T+1),.];

liquidity = seqa(1,1,STOCKS_N)~zerod_mv~zerod_v~zerod_p;
liquidity = sortc(liquidity,2~3~4);
print "20 Most Liquid Stocks are:";
print liquidity[1:20,1];

z1 = sumc(VO[1:T,.] .<= 0);
z2 = sumc((P[2:(T+1),.]-P[1:T,.]) .<= 0);
comb = sumc((VO[1:T,.]+(P[2:(T+1),.]-P[1:T,.])).<= 0);
skip = z1+z2-comb;
P = P[2:(T+1),.];
*/
/************* Amihud Measure of Liquidty ***********/
/*Liq = sumc((abs(RI[1:T,.]).*(VO[1:T,.] .> 0))
        ./((VO[1:T,.]+(VO[1:T,.].<=0)).*(P[1:T,.]+(P[1:T,.].<=0))));
Liq = Liq./(T-skip);

zerod_v = zerod_v/T;
zerod_p = zerod_p/T;

ref = seqa(1,1,STOCKS_N);
Liq = Liq~ref;
//print Liq;
Liq = sortc(Liq,1);
//leave only 20 most liquid stocks (i.e. 20 columns)
ref = Liq[1:20,2];*/
//print ref;


/******************************************************************/
//estimate 2-year rolling betas
X = fitted_value~HML~SMB;

//liquidity = liquidity[1:100,1];
//RI = RI[.,liquidity'];
gamma_weekly = zeros(rows(RI)-103,4);
for week(366,rows(RI)-103,1);
    
    //was alive before the end of the period
    //indx = COMPANIES.*(alive_dead[.,1].<=(week+103)).*(alive_dead[.,1].>0);
    //was alive before the start of the period
    indx = COMPANIES.*(alive_dead[.,1].<=week).*(alive_dead[.,1].>0);
    //dies after the end period
    indx = indx.*(alive_dead[.,2].>(week+102));
    indx = rem_zeros(indx);
    small_RI = RI[week:(week+103),indx]-r_f[week:(week+103)];
    //print "using " cols(small_RI) " stocks for week " week;
    b = zeros(1,3);
    indx2 = zeros(1,1);
    for i(1,cols(small_RI),1);
       // start_time = alive_dead[indx[i],1]-week+1;
        //if (start_time < 1);
            start_time = 1;
        //endif;
        end_time = 103;
/*alive_dead[indx[i],2]-week+1;
        if (end_time > 103);
            end_time = 103;
        endif;*/
        //period = (end_time-start_time+1);
        //if (period > 52);
          /*  print "regressing " indx[i] " stock on " period 
                " values for alive " alive_dead[indx[i],1] 
                " dead: " alive_dead[indx[i],2]; */
            //regress on all but the last, week
            {b_i,st_err,R2} = ols(small_RI[start_time:end_time,i],X[(week+start_time-1):(week+end_time-1),.]);
            b = b|b_i';
            indx2 = indx2|i;
        //endif;
    endfor;
    b = b[2:rows(b),.]; //n stocks
    indx2 = indx2[2:rows(indx2),.];
    X2 = ones(rows(b),1)~b;
    {b_i,st_err,R2} = ols(meanc(small_RI[104,indx2]),X2);
    gamma_weekly[week,.] = b_i';
endfor;
gamma_weekly = rem_zeros(gamma_weekly);
print "finished estimating betas";
t1=meanc(gamma_weekly)./stdc(gamma_weekly);
data = meanc(gamma_weekly)'|stdc(gamma_weekly)'|maxc(gamma_weekly)'|minc(gamma_weekly)'|t1';
r = xlsWritem(data,"out_part2.xlsx", "B11:F15" , 2,0);
print "t: " t1';
print "max: " maxc(gamma_weekly)';
print "min: " minc(gamma_weekly)';
print "average: " meanc(gamma_weekly)';
print "stdev: " stdc(gamma_weekly)';
/*
start = rows(RI)-rows(b)+1;
for i(1,cols(RI),1);
        X = ones(rows(b1),1)~b1[.,i]~b2[.,i]~b3[.,i];
        {b_i,st_i} = ols(RI[start:rows(RI),i],X);
        print "b: " b_i';
        print st_i';
        print b_i/st_i;
endfor;*/
proc (0) = set_alive_dead();
    local set_alive, set_dead;
    for c(1,cols(RI),1);
        set_alive = 0;
        set_dead = 0;
        for r(1,rows(RI),1);
                if (RI[r,c] != 0);
                    set_dead = 0;
                    if (set_alive == 0);
                        alive_dead[c,1] = r;
                        set_alive = 1;
                    endif;
                else;
                    if (set_dead == 0);
                        set_dead = r;
                    endif;
                endif;
        endfor;
        if (set_dead != 0);
            alive_dead[c,2] = set_dead;
        else;
            alive_dead[c,2] = rows(RI);
        endif;
    endfor;
endp;
/********construct portfolios*********/
proc (0) = apply_exchange_rate();
    local total_zeros,new_ex_rate;
    is_usd_or_ru = is_usd_or_ru.*seqa(1,1,STOCKS_N);
    total_zeros = STOCKS_N-sumc((is_usd_or_ru.>0));
    is_usd_or_ru = sortc(is_usd_or_ru,1);
    is_usd_or_ru = is_usd_or_ru[(total_zeros+1):rows(is_usd_or_ru)];
    new_ex_rate = ex_rate*seqa(1,1,rows(is_usd_or_ru))';
    RI[.,is_usd_or_ru'] = new_ex_rate.*RI[.,is_usd_or_ru'];
    MV[.,is_usd_or_ru'] = new_ex_rate.*MV[.,is_usd_or_ru'];
endp;
proc (0) = value_size(indexes,start_series,end_series);
    local selected_stocks, small_small,small_med,small_lg,big_small,big_med,big_lg;
    selected_stocks = portfolio_quote(MV[start_series:end_series,indexes])
                    ~indexes
                    ~portfolio_quote(PTBV[start_series:end_series,indexes]);
    selected_stocks = sortc(selected_stocks,1);
    {small_small,small_med,small_lg} = get_value_growth(
        selected_stocks[1:ceil(rows(selected_stocks)*0.5),2:3]);
    {big_small,big_med,big_lg} = get_value_growth(
        selected_stocks[(ceil(rows(selected_stocks)*0.5)+1):rows(selected_stocks),2:3]);
    const_RI_for_HML_SMB(small_small,small_med,small_lg,
                        big_small,big_med,big_lg,start_series,end_series);
endp;
proc (0) = const_RI_for_HML_SMB(small_small,small_med,small_lg,
                                big_small,big_med,big_lg,start_series,end_series);
    print "start";
    print "week: " start_series " - year: " (floor(start_series/52)+1999);
    print cols(small_small) " - " cols(small_med) " - " cols(small_lg) " - "
        cols(big_small) " - " cols(big_med) " - " cols(big_lg);

    HML_SMB_STATS
        = HML_SMB_STATS|(stats(small_small~big_small~small_lg~big_lg,
                start_series,end_series)~stats(small_small~small_med~big_small~small_lg~big_med~big_lg,
                start_series,end_series));
    small_small = weighted_portfolio(small_small,start_series,end_series);
    small_med = weighted_portfolio(small_med,start_series,end_series);
    small_lg = weighted_portfolio(small_lg,start_series,end_series);
    big_small = weighted_portfolio(big_small,start_series,end_series);
    big_med = weighted_portfolio(big_med,start_series,end_series);
    big_lg = weighted_portfolio(big_lg,start_series,end_series);
    
    _small_small[(start_series-1):(end_series-1)] = small_small;
    _small_med[(start_series-1):(end_series-1)] = small_med;
    _small_ll[(start_series-1):(end_series-1)] = small_lg;
    _big_small[(start_series-1):(end_series-1)] = big_small;
    _big_med[(start_series-1):(end_series-1)] = big_med;
    _big_lg[(start_series-1):(end_series-1)] = big_lg;
    
    HML[(start_series-1):(end_series-1)] = (small_small+big_small)/2+(small_lg+big_lg)/2;
    SMB[(start_series-1):(end_series-1)] = (small_small+small_med+small_lg)/3
                           -(big_small+big_med+big_lg)/3;
endp;
proc (1) = stats(indeces,start_series,end_series);
    local a_RI;
    a_RI = safe_return_division(RI[(start_series-1):end_series,indeces]);
    a_RI = prodc((1+a_RI))-1; //get annual returns
    retp(minc(a_RI)~maxc(a_RI)~meanc(a_RI)~stdc(a_RI));
endp;
/**indeces - a row with indeces of all stocks in a portfolio*/
proc (1) = weighted_portfolio(indeces,start_series,end_series);
    local a_RI,a_MV,w_ret;
    a_RI = safe_return_division(RI[(start_series-1):end_series,indeces]);
    //a_RI = RI[(start_series-1):end_series,indeces];    //53 weeks
    //returns for 52 weeks
    //a_RI = a_RI[2:rows(a_RI),.]./a_RI[1:(rows(a_RI)-1),.]-1;
    a_MV = MV[start_series:end_series,indeces];
    w_ret = a_RI.*(a_MV/sumc(a_MV'));
    w_ret = sumc(w_ret');
    retp(w_ret);
endp;
proc (1) = safe_return_division(R_);
    R_ = R_[2:rows(R_),.]./((R_[1:(rows(R_)-1),.].==0)
                            +R_[1:(rows(R_)-1),.])
        -(abs(R_[1:(rows(R_)-1),.]).>0)
        -(R_[1:(rows(R_)-1),.].==0).*R_[2:rows(R_),.];
    retp(R_);
endp;
/*takes a 2-column series and returns 3 3rds based on sorted 2nd column*/
proc (3) = get_value_growth(selected_stocks);
    local vg_small, vg_med, vg_lg,endseries;
    selected_stocks = sortc(selected_stocks,2);
    endseries = ceil(rows(selected_stocks)*0.3);
    vg_small = selected_stocks[1:endseries,1]';
    vg_med = selected_stocks[(ceil(rows(selected_stocks)*0.3)+1):ceil(rows(selected_stocks)*0.7),1]';
    if ((ceil(rows(selected_stocks)*0.7)+1) > rows(selected_stocks));
        vg_lg = 0;
    else;
        vg_lg = selected_stocks[(ceil(rows(selected_stocks)*0.7)+1):rows(selected_stocks),1]';
    endif;
    retp(vg_small, vg_med, vg_lg);
endp;
/*takes a representative value for the start_series series (CURRENTLY: an Average)*/
proc (1) = portfolio_quote(col);
    retp(col[1,.]');
endp;

proc (1) = portfolio_indexes(start_series);
    local cell, ind;
    cell = (abs(PTBV[start_series,.]).>0)';
    ind  = zeros(1,1);
    for i(1,rows(cell),1);
        if (cell[i] == 1);
            ind = ind|i;
        endif;
    endfor;
    ind = ind[2:rows(ind)];
    retp(ind);
endp;
proc (1) = min(v1,v2);
    if (v1 < v2);
        retp(v1);
    else;
        retp(v2);
    endif;
endp;
proc (3) = ols(Y,X);
    local SSR, SST, B,st_err,e,_Qxx,Qexx;
    _Qxx = inv(X'X);
    B = _Qxx*X'*Y;
    e = Y-X*B;
    Qexx = (X.*e)'(X.*e);
    st_err = sqrt(diag(_Qxx*Qexx*_Qxx));
    SST = sumc((Y-meanc(Y)).^2);
    SSR = sumc(e.^2);
    retp (B,st_err,(1-SSR/SST));
endp;
/*removes rows with first column element = 0, preserving original order*/
proc (1) = rem_zeros(orig);
    local zer,A,indx;
    orig = orig~seqa(1,1,rows(orig));
    A = sortc(orig,1);
    zer = rows(A)-sumc((A[.,1].>0));
    indx = A[(zer+1):rows(A),cols(A)];
    retp(orig[indx,1:(cols(orig)-1)]);
endp;
end;